<?php

/*
 * takes care of
 *  - drupal_projects
 *  - drupal_projects_page
 *  - personal_profile
 *  - personal_profile_page
 *  - ufal_tool
 *  - ufal_tool_page
 *  - ufal_course
 *  - ufal_course_page
 *  - ufal_grant
 *  
 *  content types
 */

function drupal_projects_node_info() {

	$items['drupal_projects'] = array(
			'name' => t('Project'),    // name of your content type
			'type' => 'drupal_projects',
			'base' => 'node_content',
			'description' => t('Project pages form a section of UFAL pages with own logo, slogan and main menu. UFAL logo in the right hand side of the header and a first link in main menu provide means of returning back to the UFAL homepage. Each project resides in an aptly named subdirectory.'),
			'has_title' => '1',
			'title_label' => t('Project name'),
			'body_label' => t('Homepage content'),
			//'help' => t('Please fill in all fields.'),
			'locked' => true,
	);
	
	$items['drupal_projects_page'] = array(
			'name' => t('Subpage'),    // name of your content type
			'type' => 'drupal_projects_page',
			'base' => 'node_content',
			'description' => t('Add an additional page into an existing project.'),
			'has_title' => '1',
			'title_label' => t('Page title'),
			'body_label' => t('Page content'),
			//'help' => t('Please fill in all fields.'),
			'locked' => true,
	);

	return $items;
}

function drupal_projects_form($node, $form_state) {
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_init
 */
function drupal_projects_init() {
	/**
	 * force public project urls ending in trailing slash
	 * so relative links work as expected (ie. relative to the project url)
	 */
	if (!path_is_admin(current_path())) {

		$node = menu_get_object();
		
		if (!empty($node) && $node->type == 'drupal_projects') {
			// causes linkchecker discrepances ;(
			// 5.5. so we actually need to do the opposite, so links are the same as we check them
			// but avoid the root page ('/')
			if (preg_match('/.\/$/', $_SERVER['REQUEST_URI'])) {
				$path = rtrim($_SERVER['REQUEST_URI'], '/');
				$path = ltrim($path, '/');
				return drupal_goto($path, $options = array(), $http_response_code = 301);
			}	
			// DISABLED NOW;
			return;



			$alias = _project_get_alias($node);
			//$path = $alias . '/';
			$path = preg_replace('/\/$/', '', $alias);
			// try to avoid redirect loop
			//if (strpos($_SERVER['REQUEST_URI'], $path) === false) {
			if ($path !== $alias) {
				return drupal_goto($path, $options = array(), $http_response_code = 301);
			}
		}
	}
}

/**
 * Implements hook_node_insert().
 * 
 * new project needs own menu
 * new project needs shortcut
 * $node already has $node->nid
 */
function drupal_projects_node_insert($node) {
	$t = get_t();
	
	if (_is_managed_project_type($node->type)) {
		// create a new menu for the project minisite
		$menu = _project_to_menu_array($node);
		if (!menu_load($menu['menu_name'])) {
			menu_save($menu);
			// allow this menu for relevant subpage content type
			// otherwise you couldn't put pages there
			// TODO this is not deleted upon node delete!!!
			$allowed_menus = variable_get('menu_options_'.$node->type.'_page');
			$allowed_menus[]  = $menu['menu_name'];
			variable_set('menu_options_'.$node->type.'_page', $allowed_menus);
		}
		
		// find coresponding term
		$term = _project_to_term($node);
		
		// workbench access
		_workbench_access_allow_user_access_to_project($term->tid);
		
		// add it to the shortcuts
		$shortcut_set = shortcut_set_load(variable_get('drupal_projects_shortcut_set_name'));
		if ($shortcut_set && $term->tid) {
			$shortcut_link = array(
				'link_path' => 'admin/my-content/' . $term->tid,
				'link_title' => _project_to_acronym($node),
				'weight' => -20,
				'menu_name' => $shortcut_set->set_name,
				'plid' => 0,
				'module'  => 'drupal_projects'
			);
			menu_link_save($shortcut_link);
			menu_cache_clear_all();
		}
	}
}

/**
 * a node being inserted or updated.
 *  - project term in right vocabulary (projects/profiles/tools)
 *  - auto path
 *  - 
 */

function drupal_projects_node_presave($node) {
	$t = get_t();
	if (_is_managed_project_type($node->type)) {
		// taxonomy classification
		if (isset($node->original) && _project_to_term_tid($node->original)) {
			drupal_projects_term_update($node, $node->original);
		} else {
			$project_term = drupal_projects_term_create($node);
			_attach_node_to_project($node, $project_term);
		}
		
		// update the menu for the project minisite
		if (isset($node->original)) {
			$menu = _project_to_menu_array($node->original);
			if (menu_load($menu['menu_name'])) {
				// new menu, but got same menu name
				$menu = _project_to_menu_array($node);
				menu_save($menu);
			}
		}
		
		// if alias has changed
		// we have to update all subpage aliases
		if (isset($node->path['original']['alias']) && $node->path['alias'] !== $node->path['original']['alias']) {
			$old_alias = $node->path['original']['alias'];
			$new_alias = $node->path['alias'];
			$result = _project_get_url_aliases($old_alias);
			foreach ($result as $path) {
				$pattern = '^' . str_replace('/', '\/', $old_alias) . '\/';
				$path['alias'] = preg_replace("/$pattern/", $new_alias . '/', $path['alias']);
				path_save($path);
			}
		}
		
		// shortcut bar update
		if (isset($node->original)) {
			drupal_projects_shortcut_update($node);
		}
	}
	
	if (preg_match('/^(drupal_projects_page|personal_profile_page|ufal_tool_page|ufal_course_page)$/', $node->type)) {
		// menu has to be expanded
		$node->menu['expanded'] = 1;
		
		// derive path in form [project]/[page]
		$project = _node_to_project($node);
		$alias = _project_get_alias($project);
		if (empty($node->path['alias'])) {
			$node->path['alias'] = $alias . '/' . _project_slug($node->title);
			$node->path['pathauto'] = 0;
		}
	}
	
	if (preg_match('/^(personal_profile)$/', $node->type)) {
		// name with degrees defaults to node title
		if (empty($node->field_name_with_degrees[$node->language])) {
			$node->field_name_with_degrees[$node->language][0]['value'] = $node->title;
		}
		
		//
		$old_web_orig = @$node->original->field_old_web_address[$node->language][0]['value'];
		$old_web_curr = @$node->field_old_web_address[$node->language][0]['value'];
		if ($old_web_orig != $old_web_curr) {
			module_load_include('module', 'redirect', 'redirect');
			if ($old_web_orig) {
				// exists && differs -> remove old ones
				redirect_delete_by_path('node/' . $node->nid);
			}
			if ($old_web_curr) {
				preg_match('/~[^\/]+/', $old_web_curr, $matches);
				// create new one
				$redirect = new stdClass();
				$redirect->type = 'redirect';
				$redirect->language = 'und';
				$redirect->status_code = 0;
				$redirect->source = $matches[0];
				$redirect->source_options = array();
				$redirect->redirect = 'node/' . $node->nid;
				$redirect->redirect_options = array();
				redirect_save($redirect);
			}
		}
	}
}

function drupal_projects_shortcut_update($node) {
	$shortcut_set = shortcut_set_load(variable_get('drupal_projects_shortcut_set_name'));
	$term_tid = _project_to_term_tid($node);
	$acronym = _project_to_acronym($node);
	
	$result = _project_get_shortcut_links($term_tid);
	foreach ($result as $link) {
		if ($link['link_path'] == 'admin/my-content/' . $term_tid) {
			$link['options']    = unserialize($link['options']);
			$link['link_title'] = $acronym;
			menu_link_save($link);
		}
	}
	menu_cache_clear_all();
}
function drupal_projects_term_update($node, $original_node) {
	$t = get_t();
	// update the taxonomy name upon node change
	$term = _project_to_term($original_node);
	$term->name = $t($node->title);
	taxonomy_term_save($term);
}
function drupal_projects_term_create($node) {
	$t = get_t(); 
	$vocabulary_id = _project_to_vocabulary_id($node);
	$vocabulary    = taxonomy_vocabulary_load($vocabulary_id);
	$terms = taxonomy_get_term_by_name($t($node->title), $vocabulary->machine_name);
	if (count($terms) > 0) {
		// found existing
		// TODO: this is a problem that forexample upon creation of new course
		// with same title (as in a archive)
		// a new course will end up in one project as the previous one!!!
		// would like to disable it
		// but there probalby was a use case for this???
		$newterm = array_shift($terms);
	} else {
		// add a taxonomy term
		$newterm = new stdClass();
		$newterm->name = $t($node->title);
		$newterm->vid  = $vocabulary_id;
		taxonomy_term_save($newterm);
	}
	return $newterm;
}
function _attach_node_to_project($node, $project_term) {
	// attach node to taxonomy term
	$project_field = _get_project_attachment_field($node);
	$node->{$project_field}['und'][$project_term->tid] = (array) $project_term;
	// even after localization fiels use 'und'
	// $node->{$project_field}[$node->language][$project_term->tid] = (array) $project_term;
}
function _get_project_attachment_field($node) {
	$tx = array(
		'personal_profile' => 'field_profile',
		'drupal_projects'  => 'drupal_projects_project',
		'ufal_tool'        => 'field_project_term',
		'ufal_course'      => 'field_course_term',
		'ufal_grant'       => 'field_grant_term',
		'personal_profile_page' => 'field_profile',
		'drupal_projects_page'  => 'drupal_projects_project',
		'ufal_tool_page'        => 'field_project_term',
		'ufal_course_page'      => 'field_course_term',
	);
	$project_field = @$tx[$node->type];
	if (!$project_field) {
		// as we get called on every page request
		// as part of hook_custom_theme call
		// we do not report
		//drupal_set_message('no project field defined for ' . $node->type, 'warning');
	}
	return $project_field;
}

/**
 * Implements hook_node_delete().
 */
function drupal_projects_node_delete($node) {
	$t = get_t();
	
	if (_is_managed_project_type($node->type)) {
		$vocabulary_id = _project_to_vocabulary_id($node);
		$vocabulary    = taxonomy_vocabulary_load($vocabulary_id);
	
		// delete a taxonomy term
		$terms = taxonomy_get_term_by_name($t($node->title), $vocabulary->machine_name);
		if (count($terms) == 1) {
			$term = current($terms);
			taxonomy_term_delete($term->tid);
		}
		// delete shortcut links to project view
		// TODO could be rewritten now!! as link_path contains project_tid now
		$result = _project_get_shortcut_links($term->tid);
		foreach ($result as $link) {
			if ($link['link_path'] == 'admin/my-content/' . $term->tid) {
				menu_link_delete($link['mlid']);
			}
		}
	
		// delete menu for the project minisite
		$menu = _project_to_menu($node);
		if ($menu) {
			// delete all project/profile/tools/course subpages
			$project_field = _get_project_attachment_field($node);
			$bundle = $node->type . '_page';
			
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
					->entityCondition('bundle', $bundle)
					->fieldCondition($project_field, 'tid', $term->tid, '=');
			$result = $query->execute();

			if (!empty($result['node'])) {
				$nids = array_keys($result['node']);
				node_delete_multiple($nids);
			}
			
			// last shot
			menu_delete($menu);
			menu_cache_clear_all();
		}
	}
	
	if (preg_match('/^(personal_profile)$/', $node->type)) {
		// delete redirects to current node
		$old_web = @$node->field_old_web_address[$node->language][0]['value'];
		if ($old_web) {
			module_load_include('module', 'redirect', 'redirect');
			redirect_delete_by_path('node/' . $node->nid);
		}
	}
}

/**
 * Implements hook_custom_theme
 */
function drupal_projects_custom_theme() {
	// default theme for admin area
	$current_path = current_path();
	$request_path = request_path();
	if (path_is_admin($current_path)) { return; }
	if (preg_match('/user\/\d+/', $current_path)) { return; }
	if (preg_match('/^events\/.*/', $request_path)) { 
		menu_tree_set_path('main-menu', drupal_get_normal_path('events'));
		return 'drufal';
	}
	if (preg_match('/^data.*/', $request_path)) { 
		menu_tree_set_path('main-menu', drupal_get_normal_path('data'));
		return 'drufal';
	}
	if (preg_match('/^projects.*/', $request_path)) { 
		menu_tree_set_path('main-menu', drupal_get_normal_path('projects'));
		return 'drufal';
	}
	if (preg_match('/^(teaching.*|courses|lct)/', $request_path)) { 
		menu_tree_set_path('main-menu', drupal_get_normal_path('teaching'));
		return 'drufal';
	}
	if (preg_match('/^(books|pbml|popularization|techrep)/', $request_path)) { 
		menu_tree_set_path('main-menu', drupal_get_normal_path('publications'));
		return 'drufal';
	}
	if (preg_match('/^events.*/', $request_path)) { 
		menu_tree_set_path('main-menu', drupal_get_normal_path('events'));
		return 'drufal';
	}

	// find out if the current page is part of projects hierarchy
	$node = node_load(arg(1));
	$term = _project_to_term($node);
	
	if (isset($term->vid)) {
		if (@$term->vid == variable_get('ufal_grant_vocabulary_id')) {
			menu_tree_set_path('main-menu', drupal_get_normal_path('grants'));
			return 'drufal';
		}
		else if (@$term->vid == variable_get('drupal_projects_vocabulary_id')) {
			// we got a project (page)
			$project = _term_to_project($term);
			$own_menu = !@$project->field_suppress_own_menu['und'][0]['value'];
			if ($own_menu) {
				menu_tree_set_path('main-menu', drupal_get_normal_path('projects'));
				return 'drufal_project';
			} else {
				return 'drufal';
			}
		}
		else if (@$term->vid == variable_get('profiles_vocabulary_id')) {
			// we got a personal profile (page)
			menu_tree_set_path('main-menu', 'people');
			return 'drufal_profile';
		}
		else if (@$term->vid == variable_get('ufal_tool_vocabulary_id')) {
			// we got a ufal tool (page)
			menu_tree_set_path('main-menu', drupal_get_normal_path('tools'));
			return 'drufal';
			return 'drufal_project';
			return 'drufal_tool';
		}
		else if (@$term->vid == variable_get('ufal_course_vocabulary_id')) {
			// we got a ufal course (page)
			menu_tree_set_path('main-menu', drupal_get_normal_path('teaching'));
			return 'drufal';
			return 'drufal_course';
		}
	}
}

/**
 * Implements hook_image_default_styles().
 *
 * hook_image_default_styles() declares to Drupal any image styles that are
 * provided by the module. An image style is a collection of image effects that
 * are performed in a specified order, manipulating the image and generating a
 * new derivative image.
 *
 * This hook can be used to declare image styles that your module depends on or
 * allow you to define image styles in code and gain the benefits of using
 * a version control system.
 */
function drupal_projects_image_default_styles() {
	// This hook returns an array, each component of which describes an image
	// style. The array keys are the machine-readable image style names and
	// to avoid namespace conflicts should begin with the name of the
	// implementing module. e.g.) 'mymodule_stylename'. Styles names should
	// use only alpha-numeric characters, underscores (_), and hyphens (-).
	$styles = array();
	$styles['drupal_projects_logo_style'] = array();

	// Each style array consists of an 'effects' array that is made up of
	// sub-arrays which define the individual image effects that are combined
	// together to create the image style.
	$styles['drupal_projects_logo_style']['effects'] = array(
		array(
				// Name of the image effect. See image_image_effect_info() in
				// modules/image/image.effects.inc for a list of image effects available
				// in Drupal 7 core.
				'name' => 'image_scale',
				// Arguments to pass to the effect callback function.
				// The arguments that an effect accepts are documented with each
				// individual image_EFFECT_NAME_effect function. See image_scale_effect()
				// for an example.
				'data' => array(
						'width' => 142,
						'height' => 114,
						'upscale' => 0,
				),
				// The order in which image effects should be applied when using this
				// style.
				'weight' => 0,
		),
	);

	return $styles;
}

function drupal_projects_shortcut_default_set($account) {
	return variable_get('drupal_projects_shortcut_set_name');
}

// TODO set uri of taxonomy terms
// http://dropbucket.org/node/92

/**
 * alter the Content View Filter form
 */
function drupal_projects_preprocess_views_exposed_form(&$vars, $hook) {
	if ($vars['form']['#id'] == 'views-exposed-form-admin-views-node-system-1') {
		// Change the text on the submit button
		$vars['form']['submit']['#value'] = t('Search');
		// Rebuild the rendered version (submit button, rest remains unchanged)
		unset($vars['form']['submit']['#printed']);
		$vars['button'] = drupal_render($vars['form']['submit']);
	}
}

/**
 * preselect the project / profile
 * custom redirect after node delete
 */
function drupal_projects_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'drupal_projects_node_form' || $form_id == 'ufal_tool_node_form') {
		// how to cite field should have open with the simple wysiwyg editor
		$form['field_how_to_cite']['und'][0]['#format'] = 'full_html_simple_editor_';
	}
	if (preg_match('/^(drupal_projects|personal_profile|ufal_tool|ufal_course)_page_node_form$/', $form_id)) {
		// Subpage
		//$lang = $form['language']['#value']; // lang is und
		$lang = 'und';
		$tx = array(
			'drupal_projects_page_node_form'  => 'drupal_projects_project',
			'personal_profile_page_node_form' => 'field_profile',
			'ufal_tool_page_node_form'        => 'field_project_term',
			'ufal_course_page_node_form'      => 'field_course_term',
		);
		$project_field = @$tx[$form_id];
		
		if (is_numeric(arg(3))) {
			// preselected project
			$selected_project_tid = arg(3);
			$form[$project_field][$lang]['#default_value'] = $selected_project_tid;
		} else {
			$selected_project_tid = $form[$project_field][$lang]['#default_value'][0];
		}
		
		// display only parent pages that belong to current project
		$term = taxonomy_term_load($selected_project_tid);
		$project = _term_to_project($term);
		$menu_name = _project_to_menu_name($project);
		$pattern = '^' . $menu_name;
		$suppress_own_menu = @$project->field_suppress_own_menu['und'][0]['value'];
		if (!$suppress_own_menu) foreach ($form['menu']['link']['parent']['#options'] as $key => $option) {
			if (!preg_match("/$pattern/", $key)) {
				unset($form['menu']['link']['parent']['#options'][$key]);
			}
		}
		
		if (is_numeric(arg(3))) {
			// enable menu creation by default
			$form['menu']['enabled']['#default_value'] = 1;
		}
		
		// hide
		$form[$project_field][$lang]['#disabled'] = true;
		$form[$project_field][$lang]['#type']     = 'value';
		$form['menu']['link']['weight']['#disabled']         = true;
		$form['menu']['link']['weight']['#type']             = 'value';
		$form['menu']['link']['description']['#disabled']    = true;
		$form['menu']['link']['description']['#type']        = 'value';
	}
	if ($form_id == 'node_delete_confirm' && _is_managed_project_type($form['#node']->type)) {
		$form['#submit'][] = '_custom_redirect_after_delete';
	}
	if ($form_id == 'drupal_projects_node_form' && (arg(1) == 'add' || arg(2) == 'edit' || arg(1) == 'ajax')) {
		// create Drupal Project
		$form['drupal_projects_project']['#access'] = false;
	}
	if ($form_id == 'personal_profile_node_form' && (arg(1) == 'add' || arg(2) == 'edit' || arg(1) == 'ajax')) {
		// create Personal Profile
		$form['field_profile']['#access'] = false;
		// show 9 entries for position multiselect
		$form['field_position'][ $form['field_position']['#language'] ]['#size'] = '9';
		
		_wrap_form_field($form, 'field_main_research_interests');
		_wrap_form_field($form, 'field_curriculum_vitae');
		_wrap_form_field($form, 'field_selected_bibliography');
		_wrap_form_field($form, 'field_projects');
		//_wrap_form_field($form, 'body');
	}
	if ($form_id == 'ufal_tool_node_form' && (arg(1) == 'add' || arg(2) == 'edit')) {
		// create Ufal Tool
		$form['field_project_term']['#access'] = false;
	}
	if ($form_id == 'ufal_course_node_form' && (arg(1) == 'add' || arg(2) == 'edit' || arg(1) == 'ajax')) {
		// create Ufal Course
		$form['field_course_term']['#access'] = false;
	}
	if ($form_id == 'ufal_grant_node_form' && (arg(1) == 'add' || arg(2) == 'edit' || arg(1) == 'ajax')) {
		// create Ufal Grant
		$form['field_grant_term']['#access'] = false;
	}
}
function _custom_redirect_after_delete($form, &$form_state) {
	// GET destination has precedence over $form_state['redirect']
	$_GET['destination'] = 'admin/my-content';
	drupal_static_reset('drupal_get_destination');
	$form_state['redirect'] = 'admin/my-content';
}
/**
 * collapse the 'Bulk Operations' form and put it down the page
 */
function drupal_projects_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
	if ($form['#form_id'] =='views_form_admin_views_node_system_1') {
		$form['select']['#collapsed'] = TRUE;
		$form['select']['#weight'] = 100;
	}
	if ($form['#form_id'] =='views_form_admin_my_content_page') {
		$form['select']['#collapsed'] = TRUE;
		$form['select']['#weight'] = 100;
	}
	if ($form['#form_id'] =='views_form_admin_my_content_page_1') {
		$form['select']['#collapsed'] = TRUE;
		$form['select']['#weight'] = 100;
	}
}

/**
 * implements hook_preprocess_views_view
 * Wrap exposed filters in a fieldset. 
 */
function drupal_projects_preprocess_views_view(&$vars) {
	global $theme_key;
	//if (preg_match('/admin/', $theme_key) && $vars['exposed']) {
	if ($vars['exposed']) {
		drupal_add_js('misc/form.js');
		drupal_add_js('misc/collapse.js');
		// Default collapsed
		$collapsed = TRUE;
		$class = array('collapsible', 'collapsed');
		// TODO, don't know how to detect selected filters
		if (0) {
			// assume other get vars are exposed filters, so expand fieldset
			// to show applied filters
			$collapsed = FALSE;
			$class = array('collapsible');
		}
		$fieldset['element'] = array(
				'#title' => t('Filter'),
				'#collapsible' => TRUE,
				'#collapsed' => $collapsed,
				'#attributes' => array('class' => $class),
				'#children' => $vars['exposed'],
		);
		$vars['exposed'] = theme('fieldset', $fieldset);
	}
}

/**
 * 
 */
function drupal_projects_menu_local_tasks_alter(&$data, $router_item, $root_path) {
	switch ($root_path){
		case 'admin/my-content':
			$out = array(
				'admin/tasks' => 1,
				'admin/index' => 1,
				'admin' => 1,
				'admin/index' => 1,
				'admin/workbench/sections' => 1,
				'admin/my-content-old-version' => 1,
			);
			foreach ($data['tabs'][0]['output'] as $i => &$tab) {
				if (@$out[$tab['#link']['path']]) {
					unset($data['tabs'][0]['output'][$i]);
				}
			}
			break;
		case 'admin/my-content/%':
			$current_path = current_path();
			
			if (preg_match('/admin\/my-content\/(\d+)/', $current_path, $matches)) {
				$project_tid = $matches[1];
			}
			if (!$project_tid) {
				break;
			}
			
			$term = taxonomy_term_load($project_tid);
			$project = _term_to_project($term);
			
			if (@$project->type == 'drupal_projects') {
				_add_local_task($data, t('Add page to project'), 'node/add/drupal-projects-page', "/$project_tid");
				_add_local_task($data, t('Alter project menu'),  'admin/structure/menu/manage/' . _project_to_menu_name($project));
			}
			if (@$project->type == 'personal_profile') {
				_add_local_task($data, t('Add page to personal profile'), 'node/add/personal-profile-page', "/$project_tid");
				_add_local_task($data, t('Alter menu'), 'admin/structure/menu/manage/' . _project_to_menu_name($project)); 
			}
			if (@$project->type == 'ufal_tool') {
				_add_local_task($data, t('Add page to tool site'), 'node/add/ufal-tool-page', "/$project_tid");
				_add_local_task($data, t('Alter menu'), 'admin/structure/menu/manage/' . _project_to_menu_name($project));
			}
			if (@$project->type == 'ufal_course') {
				_add_local_task($data, t('Add page to course site'), 'node/add/ufal-course-page', "/$project_tid");
				_add_local_task($data, t('Alter menu'), 'admin/structure/menu/manage/' . _project_to_menu_name($project));
			}
			
			break;
	}
}
function _add_local_task(&$data, $title, $destination, $href_suffix = null) {
	$item = menu_get_item($destination);
	if ($href_suffix) {
		$item['href'] .= $href_suffix;
	}
	$item['title'] = $title;
	if ($item['access']) {
		$data['actions']['output'][] = array(
				'#theme' => 'menu_local_action',
				'#link' => $item,
		);
	}
}

/**
 * Adding '+ New project' link into shortcut menu
 */
function drupal_projects_page_alter(&$page) {
  if (isset($page['page_top']['toolbar'])) {
    // If the toolbar is available, add a pre-render function to modify the
    // current shortcuts in the toolbar drawer.
    $page['page_top']['toolbar']['#pre_render'][] = 'drupal_projects_toolbar_pre_render';
  }
}
function drupal_projects_toolbar_pre_render($toolbar) {
	global $user;
	// turn the configure link into 'new project link'
	$toolbar['toolbar_drawer'][0]['configure']['#title'] = t('+ Project');
	$toolbar['toolbar_drawer'][0]['configure']['#href']  = 'node/add/drupal-projects';
	
	$toolbar['toolbar_drawer'][0]['configure7'] = $toolbar['toolbar_drawer'][0]['configure'];
	$toolbar['toolbar_drawer'][0]['configure7']['#title'] = t('+ Event');
	$toolbar['toolbar_drawer'][0]['configure7']['#href']  = 'node/add/ufal-event';
	
	$toolbar['toolbar_drawer'][0]['configure6'] = $toolbar['toolbar_drawer'][0]['configure'];
	$toolbar['toolbar_drawer'][0]['configure6']['#title'] = t('+ Grant');
	$toolbar['toolbar_drawer'][0]['configure6']['#href']  = 'node/add/ufal-grant';
	
	//$toolbar['toolbar_drawer'][0]['configure5'] = $toolbar['toolbar_drawer'][0]['configure'];
	//$toolbar['toolbar_drawer'][0]['configure5']['#title'] = t('+ Event');
	//$toolbar['toolbar_drawer'][0]['configure5']['#href']  = 'node/add/ufal-event';
	
	
	//
	$toolbar['toolbar_drawer'][0]['configure4'] = $toolbar['toolbar_drawer'][0]['configure'];
	$toolbar['toolbar_drawer'][0]['configure4']['#title'] = t('+ Course');
	$toolbar['toolbar_drawer'][0]['configure4']['#href']  = 'node/add/ufal-course';
	
	// another link there
	$toolbar['toolbar_drawer'][0]['configure3'] = $toolbar['toolbar_drawer'][0]['configure'];
	$toolbar['toolbar_drawer'][0]['configure3']['#title'] = t('+ Tool');
	$toolbar['toolbar_drawer'][0]['configure3']['#href']  = 'node/add/ufal-tool';
	
	$toolbar['toolbar_drawer'][0]['configure2'] = $toolbar['toolbar_drawer'][0]['configure'];
	$toolbar['toolbar_drawer'][0]['configure2']['#title'] = t('+ Personal profile');
	$toolbar['toolbar_drawer'][0]['configure2']['#href']  = 'node/add/personal-profile';
	
	$toolbar['toolbar_drawer'][0]['configure8'] = $toolbar['toolbar_drawer'][0]['configure'];
	$toolbar['toolbar_drawer'][0]['configure8']['#title'] = t('!! Broken links');
	$toolbar['toolbar_drawer'][0]['configure8']['#href']  = 'user/' . @$user->uid . '/linkchecker';

	return $toolbar;
}
/**
 * Tie into workbench access
 */
function _workbench_access_allow_user_access_to_project($tid) {
	$account = $GLOBALS['user'];
	// Now check the user account.
	if (!isset($account->workbench_access)) {
		$account = user_load($account->uid);
	}
	$sections = @$account->workbench_access;
	if (!empty($account->workbench_access_by_role)) {
		foreach ($account->workbench_access_by_role as $key) {
			unset($sections[$key]);
		}
	}
	if (!empty($account->status) && !in_array($tid, array_keys((array)$sections))) {
		workbench_access_user_section_save($account->uid, $tid, variable_get('workbench_access'));
	}
}
/**
 * addding co-editors to own projects through 'Share' local task menu item
 */
function drupal_projects_menu() {
	$items['admin/my-content/%/editors'] = array(
			'title' => 'Share',
			'description' => 'Allow fellows to edit.',
			'page callback' => 'workbench_access_editors',
			'page arguments' => array('taxonomy', 2),
			'access callback' => 'drupal_projects_editors_menu_access',
			'access arguments' => array('taxonomy', 2),
			'type' => MENU_LOCAL_TASK,
			'weight' => 10,
			'file' => 'workbench_access.admin.inc',
			'file path' => drupal_get_path('module', 'workbench_access'),
	);
	$items['admin/my-content'] = array(
			'title' => 'My Content',
			'description' => 'List of editorial groups.',
			'page callback' => 'workbench_access_sections',
			'access arguments' => array('access workbench'),
			'type' => MENU_LOCAL_TASK,
			'weight' => 10,
			'file' => 'workbench_access.admin.inc',
			'file path' => drupal_get_path('module', 'workbench_access'),
	);
	$items['node/%/related'] = array(
			'title' => 'Project',
			'description' => 'Index of related pages',
			'access arguments' => array('access workbench'),
			'page callback' => 'drupal_projects_project_index_redirect',
			'page arguments' => array(1),
			'type' => MENU_LOCAL_TASK,
			'weight' => -1,
	);
	
	return $items;
}

function drupal_projects_project_index_redirect($nid) {
	$node = node_load($nid);
	$term_tid = _project_to_term_tid($node);
	drupal_goto("admin/my-content/$term_tid");
}

function drupal_projects_editors_menu_access() {
	$args = func_get_args();
	$project_tid = array_pop($args);
	$term = taxonomy_term_load($project_tid);
	//$term = array_pop($args);
	$account = $GLOBALS['user'];
	$project = _term_to_project($term);
	if (
	      user_access('assign workbench access')
	      // two options: just owner can share, or all editors can share
	      // editors check
	      //  || (user_access('assign workbench subaccess') && node_access('update', $project, $account))
	      // owner check
	      || (user_access('assign workbench subaccess') && $account->uid == @$project->uid)
	) {
		return TRUE;
	}
	return FALSE;
}
/**
 * Hiding project links I have no access to
 */
function drupal_projects_menu_link_alter(&$link) {
	// please call hook_translated_menu_link_alter on my links
	if (preg_match('/admin\/my-content/', $link['link_path']) && $link['module'] == 'drupal_projects' && $link['menu_name'] == variable_get('drupal_projects_shortcut_set_name')) {
		$link['options']['alter'] = TRUE;
	}
}

function drupal_projects_translated_menu_link_alter(&$link) {
	$matches = array();
	// DISABLE FOR NOW as it gives a 2s penalty on every request
	$link['hidden'] = 1;
	return;
	if (preg_match('/admin\/my-content\/(\d+)/', $link['link_path'], $matches) && $link['module'] == 'drupal_projects' && $link['menu_name'] == variable_get('drupal_projects_shortcut_set_name')) {
		$project_tid = $matches[1];
		$account = $GLOBALS['user'];
		$term    = taxonomy_term_load($project_tid);
		$project = _term_to_project($term);
		// Now check the user account.
		if (!node_access('update', $project, $account) || $account->uid == 1) {
			$link['hidden'] = 1;
		}
	}
}

/**
 * Utility functions
 * TODO namespace them? move to separate file?
 */

function _project_get_alias($project_node) {
	//return $project_node->path['alias'];
	return drupal_get_path_alias('node/' . $project_node->nid);
}

function _node_to_project($node) {
	$term    = _project_to_term($node);
	if (empty($term)) return false;
	$project = _term_to_project($term);
	return $project; 
}
function _project_slug($title) {
	$t = get_t();
	module_load_include('inc', 'pathauto', 'pathauto');
	$slug = pathauto_cleanstring($t($title));
	if (strlen($slug) > 32) // 
		$slug = substr($slug, 0, 31);
	return $slug;
}
function _term_slug($title) {
	$t = get_t();
	module_load_include('inc', 'pathauto', 'pathauto');
	$slug = pathauto_cleanstring($t($title));
	if (strlen($slug) > 32) //
		$slug = substr($slug, 0, 31);
	return $slug;
}

function _project_to_term_tid($node) {
	if (!empty($node)) {
		$project_field = _get_project_attachment_field($node);
		if ($project_field && $project_ref = @$node->{$project_field}) {
			//$project_term = reset($project_ref[$node->language]);
			// even after localization tags still added into 'und' language
			$project_term = reset($project_ref['und']);
			return $project_term['tid'];
		}
	}
	return false;
}
function _project_to_term($node) {
	$tid  = _project_to_term_tid($node);
	$term = taxonomy_term_load($tid);
	return $term;
}
/**
 * tricky, the taxonomy seems to be a bad choice to sort nodes into projects
 * so till we switch to simple entity reference
 * at least try to speed it a bit by a query for node with smallest nid
 * (as the main node has to be created before any subpages, and deleting the main node deletes all subpages)
 * and by omitting the $query->condition('status', NODE_PUBLISHED); in order
 * to obtain own unpublished projects
 */
function _term_to_project($term) {
	if (empty($term)) return false;
	$nid = _term_to_project_finder($term->tid);
	if ($nid === false) return false;
	$node = node_load($nid);
	if (_is_managed_project_type($node->type)) {
		return $node;
	}
	return false;
}
/* adapted code from taxonomy_select_nodes that we used before */
function _term_to_project_finder($tid) {
	if (!variable_get('taxonomy_maintain_index_table', TRUE)) {
		return array();
	}
	$query = db_select('taxonomy_index', 't');
	$query->addTag('node_access');
	$query->condition('tid', $tid);
	$query->addField('t', 'nid');
	$query->addField('t', 'tid');
	// sort by nid ascending as the managed project type has to be created first
	// and then subpages are added
	$query->orderBy('t.nid', 'ASC');
	$query->range(0, 1);
	return $query->execute()->fetchField();
}

function _project_to_menu($node) {
	$menu = _project_to_menu_array($node);
	if (menu_load($menu['menu_name'])) {
		return $menu;
	} else {
		return false;
	}
}
function _project_to_menu_array($project) {
	$t = get_t();
	$title = @$project->title;
	$menu_array = array(
		'menu_name'   => _project_to_menu_name($project),
		'title'       =>  $t($title),
		'description' => 'This menu defines the core structure for the subsite '.$title.'. This is deleted along with any associated menu items when the subsite is deleted.',
		'module'      => 'drupal_projects',
	);
	return $menu_array;
}
function _project_to_menu_name($project) {
	return 'project-' . $project->nid . '-menu';
}
function _project_get_project_logo_uri($project) {
	// switch by $project->type
	$tx = array(
		'ufal_tool'        => 'drupal_projects_image',
		'ufal_course'      => 'drupal_projects_image',
		'ufal_grant'       => 'drupal_projects_image',
		'drupal_projects'  => 'drupal_projects_image',
		'personal_profile' => 'field_avatar',
	);
	$logo_field = @$tx[$project->type];
	
	if (!@isset($project->{$logo_field}['und'][0]['uri'])) {
		// default logo images are not populated for just referenced nodes (ie. not for main content)
		node_build_content($project);
	}
	
	return $project->{$logo_field}['und'][0]['uri'];
}
function _project_to_acronym($project) {
	if (isset($project->field_sis_code['und'][0]['value'])) {
		return $project->field_sis_code['und'][0]['value'];
	}
	if (isset($project->field_acronym['und'][0]['value'])) {
		return $project->field_acronym['und'][0]['value'];
	}
	return $project->title;
}
function _project_get_shortcut_links($project_tid) {
	$result = db_query("SELECT * FROM {menu_links} WHERE link_path = :path AND module = 'drupal_projects'", array(':path' => 'admin/my-content/'.$project_tid), array('fetch' => PDO::FETCH_ASSOC));
	return $result;
}
function _project_get_url_aliases($project_alias) {
	//$project_alias = _project_get_alias($project); // BEWARE this relays on one alias through all language variants!
	$result = db_query("SELECT * FROM {url_alias} WHERE alias LIKE :alias", array(':alias'=>"$project_alias/%"), array('fetch' => PDO::FETCH_ASSOC));
	return $result;
}
function _wrap_form_field(&$form, $field_name) {
	$form['fieldsetted_' . $field_name] = array(
			'#title' => $form[$field_name]['und']['#title'], // even after localization fields use 'und'
			'#type' => 'fieldset',
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
			'#weight' => $form[$field_name]['#weight'],
	);
	$form['fieldsetted_' . $field_name][$field_name] = $form[$field_name];
	//$form[$field_name]['#access'] = FALSE; // this will make them not save!!!!
	// localization needs to still find it there
	unset($form[$field_name]);
}
function _project_to_vocabulary_id($node) {
	$tx = array(
		'drupal_projects'  => 'drupal_projects_vocabulary_id',
		'personal_profile' => 'profiles_vocabulary_id',
		'ufal_tool'        => 'ufal_tool_vocabulary_id',
		'ufal_course'      => 'ufal_course_vocabulary_id',
		'ufal_grant'       => 'ufal_grant_vocabulary_id',
	);
	$var_name = @$tx[$node->type];
	if (!$var_name) {
		drupal_set_message('no vocabulary defined for ' . $node->type, 'warning');
	} 
	return variable_get($var_name);
}
function _is_managed_project_type($node_type) {
	if (preg_match('/^(drupal_projects|personal_profile|ufal_tool|ufal_course|ufal_grant)$/', $node_type)) { return true; }
	return false;
}

/**
 * support for bundled custom views style plugin
 */
function drupal_projects_views_api() {
	return array(
			'api' => 3.0,
			'path' => drupal_get_path('module', 'drupal_projects') . '/views'
	);
}

/**
 * 
 */
function computed_field_field_unix_name_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
	$old_address = @array_pop(array_pop(field_get_items($entity_type, $entity, 'field_old_web_address')));
	preg_match('/~[^\/]+/', $old_address, $matches);
	if (isset($matches[1])) {
		$entity_field[0]['value'] = $matches[1];
	}	
}
