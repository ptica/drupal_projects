<?php

function drupal_projects_node_info() {

	$items['drupal_projects'] = array(
			'name' => t('Project'),    // name of your content type
			'type' => 'drupal_projects',
			'base' => 'node_content',
			'description' => t('Project pages form a section of UFAL pages with own logo, slogan and main menu. UFAL logo in the right hand side of the header and a first link in main menu provide means of returning back to the UFAL homepage. Each project resides in an aptly named subdirectory.'),
			'has_title' => '1',
			'title_label' => t('Project name'),
			'body_label' => t('Homepage content'),
			//'help' => t('Please fill in all fields.'),
			'locked' => true,
	);
	
	$items['drupal_projects_page'] = array(
			'name' => t('Subpage'),    // name of your content type
			'type' => 'drupal_projects_page',
			'base' => 'node_content',
			'description' => t('Add an additional page into an existing project.'),
			'has_title' => '1',
			'title_label' => t('Page title'),
			'body_label' => t('Page content'),
			//'help' => t('Please fill in all fields.'),
			'locked' => true,
	);

	return $items;
}

function drupal_projects_form($node, $form_state) {
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_init
 */
function drupal_projects_init() {
	// beware: have to load it every time, not just only for admin ones
	// as the overlay has the code in the parent window, which is ordinary node/nid page
	$path = drupal_get_path('module', 'drupal_projects');
	drupal_add_js($path . '/js/drupal_projects.js');
	//drupal_add_css($path . '/mymodule.css');
	
	/**
	 * force public project urls ending in trailing slash
	 * so we can reuse existing relative links
	 */
	if (!path_is_admin(current_path())) {
		$node = menu_get_object();
		
		if (!empty($node) && $node->type == 'drupal_projects') {
			$acronym = _project_to_acronym($node);
			$slug = _project_slug($acronym);
			$path = $slug . '/';
			// try to avoid redirect loop
			if (strpos($_SERVER['REQUEST_URI'], $path) === false) {
				return drupal_goto($path, $options = array(), $http_response_code = 301);
			}
		}
	}
}

/**
 * Implements hook_node_insert().
 * 
 * new project needs own menu
 * new project added to the projects shortcuts
 * $node already has $node->nid
 */
function drupal_projects_node_insert($node) {
	$t = get_t();
	
	if ($node->type == 'drupal_projects') {
		// create a new menu for the project minisite
		$menu = _project_to_menu_array($node);
		if (!menu_load($menu['menu_name'])) {
			menu_save($menu);
			// we gather project menus into some var, but why???
			$allowed_menus = variable_get('menu_options_drupal_projects_page');
			$allowed_menus[]  = $menu['menu_name'];
			variable_set('menu_options_drupal_projects_page', $allowed_menus);
		}
		
		// find coresponding term
		$term = _project_to_term($node);
		
		// workbench access
		_workbench_access_allow_user_access_to_project($term->tid);
		
		// add it to the shortcut set
		$shortcut_set = shortcut_set_load(variable_get('drupal_projects_shortcut_set_name'));
		if ($shortcut_set && $term->tid) {
			$shortcut_link = array(
				'link_path' => 'admin/content',
				'link_title' => $t(_project_to_acronym($node)),
				'weight' => -20,
				'menu_name' => $shortcut_set->set_name,
				'plid' => 0,
				'options' => array('query' => array('tid'=>$term->tid)),
				'module'  => 'drupal_projects'
			);
			menu_link_save($shortcut_link);
			menu_cache_clear_all();
		}
	}
	
	if ($node->type == 'drupal_projects_page') {
		// add it to the menu
		// commented out, as we use the std menu vertical tab by default
		// expanded is carried out in presave hook below
		/*
		$term = _project_to_term($node);
		$menu_name = _project_slug(@$term->name);
		$menu_tree =  menu_tree_all_data($menu_name);
		if ($menu = menu_load($menu_name)) {
			$item = array(
				'link_path'  => drupal_get_normal_path('node/'.$node->nid),
				'link_title' => $node->title,
				'menu_name'  => $menu_name,
				'module'     => 'drupal_projects',
				'expanded'   => 1,
			);
			menu_link_save($item);
			menu_cache_clear_all();
		} */
		
	}
}

/**
 * Act on a node being inserted or updated.
 * - vocabulary term added
 */

function drupal_projects_node_presave($node) {
	$t = get_t();
	
	if ($node->type == 'drupal_projects') {
		// derive path from acronym field
		$acronym = _project_to_acronym($node);
		$node->path['alias'] = _project_slug($acronym);
		$node->path['pathauto'] = 0;
		
		// taxonomy classification
		$vocabulary_id = variable_get('drupal_projects_vocabulary_id');
		$vocabulary = taxonomy_vocabulary_load($vocabulary_id);
		
		if (isset($node->original->drupal_projects_project)) {
			// update the taxonomy name
			$term = _project_to_term($node->original);
			$term->name = $t($node->title);
			taxonomy_term_save($term);
		} else {
			$terms = taxonomy_get_term_by_name($t($node->title), $vocabulary->machine_name);
			if (count($terms) > 0) {
				// found existing
				$newterm = array_shift($terms);
			} else {
				// add a taxonomy term
				$newterm = new stdClass();
				$newterm->name = $t($node->title);
				$newterm->vid  = $vocabulary_id;
				taxonomy_term_save($newterm);
			}
			// attach to taxonomy
			$node->drupal_projects_project[$node->language][$newterm->tid] = (array) $newterm;
		}
		
		// update the menu for the project minisite
		if (isset($node->original)) {
			$menu = _project_to_menu_array($node->original);
			if (menu_load($menu['menu_name'])) {
				// new menu, but got same menu name
				$menu = _project_to_menu_array($node);
				menu_save($menu);
			}
		}
		
		// BEWARE!
		// if acronym has changed, so did project URI
		// we have to update all subpages and their menu items
		// have no idea how to do it programatically ;(
		// manually resaving the page works
		
		// shortcut bar update
		if (isset($node->original)) {
			$shortcut_set = shortcut_set_load(variable_get('drupal_projects_shortcut_set_name'));
			$term_tid = _project_to_term_tid($node);
			$new_title = $t(_project_to_acronym($node));
			
			$result = _project_get_shortcut_links();
			foreach ($result as $link) {
				$link['options'] = unserialize($link['options']);
				$tid = @$link['options']['query']['tid'];
				if ($tid == $term_tid) {
					$link['link_title'] = $new_title;
					menu_link_save($link);
				}
			}
			menu_cache_clear_all();
		}
	}
	if ($node->type == 'drupal_projects_page') {
		// menu has to be expanded
		$node->menu['expanded'] = 1;
		
		// derive path in form [project]/[page]
		$project = _node_to_project($node);
		$acronym = _project_to_acronym($project);
		$node->path['alias'] = _project_slug($acronym) . '/' . _project_slug($node->title);
		$node->path['pathauto'] = 0;
	}
}

/**
 * Implements hook_node_delete().
 */
function drupal_projects_node_delete($node) {
	$t = get_t();
	
	if ($node->type == 'drupal_projects') {
		// find appropriate vocabulary:
		$vid = variable_get('drupal_projects_vocabulary_id');
		$vocabulary = taxonomy_vocabulary_load($vid);
	
		// delete a taxonomy term
		$terms = taxonomy_get_term_by_name($t($node->title), $vocabulary->machine_name);
		if (count($terms) == 1) {
			$term = current($terms);
			taxonomy_term_delete($term->tid);
		}
		// delete shortcut links to project view
		$result = _project_get_shortcut_links();
		foreach ($result as $link) {
			$options = unserialize($link['options']);
			$tid = @$options['query']['tid'];
			if ($tid == $term->tid) {
				menu_link_delete($link['mlid']);
			}
		}
	
		// delete menu for the project minisite
		$menu = _project_to_menu($node);
		if ($menu) {
			// delete all project subpages
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
					->entityCondition('bundle', 'drupal_projects_page')                    
					->fieldCondition('drupal_projects_project', 'tid', $term->tid, '=');
			$result = $query->execute();

			if (!empty($result['node'])) {
				$nids = array_keys($result['node']);
				node_delete_multiple($nids);
			}
			
			// last shot
			menu_delete($menu);
			menu_cache_clear_all();
		}
	}
}

/**
 * Implements hook_custom_theme
 */
function drupal_projects_custom_theme() {
	// default theme for admin area
	if (path_is_admin(current_path())) { return; }

	// find out if the current page is part of projects hierarchy
	$node = node_load(arg(1));
	$term = _project_to_term($node);
	
	if (@$term->vid == variable_get('drupal_projects_vocabulary_id')) {
		// we got a project page
		return 'drufal_project';
	}
}

/**
 * Implements hook_image_default_styles().
 *
 * hook_image_default_styles() declares to Drupal any image styles that are
 * provided by the module. An image style is a collection of image effects that
 * are performed in a specified order, manipulating the image and generating a
 * new derivative image.
 *
 * This hook can be used to declare image styles that your module depends on or
 * allow you to define image styles in code and gain the benefits of using
 * a version control system.
 */
function drupal_projects_image_default_styles() {
	// This hook returns an array, each component of which describes an image
	// style. The array keys are the machine-readable image style names and
	// to avoid namespace conflicts should begin with the name of the
	// implementing module. e.g.) 'mymodule_stylename'. Styles names should
	// use only alpha-numeric characters, underscores (_), and hyphens (-).
	$styles = array();
	$styles['drupal_projects_logo_style'] = array();

	// Each style array consists of an 'effects' array that is made up of
	// sub-arrays which define the individual image effects that are combined
	// together to create the image style.
	$styles['drupal_projects_logo_style']['effects'] = array(
		array(
				// Name of the image effect. See image_image_effect_info() in
				// modules/image/image.effects.inc for a list of image effects available
				// in Drupal 7 core.
				'name' => 'image_scale',
				// Arguments to pass to the effect callback function.
				// The arguments that an effect accepts are documented with each
				// individual image_EFFECT_NAME_effect function. See image_scale_effect()
				// for an example.
				'data' => array(
						'width' => 142,
						'height' => 114,
						'upscale' => 0,
				),
				// The order in which image effects should be applied when using this
				// style.
				'weight' => 0,
		),
	);

	return $styles;
}

function drupal_projects_shortcut_default_set($account) {
	return variable_get('drupal_projects_shortcut_set_name');
}

// TODO set uri of taxonomy terms
// http://dropbucket.org/node/92

/**
 * alter the Content View Filter form
 */
function drupal_projects_preprocess_views_exposed_form(&$vars, $hook) {
	if ($vars['form']['#id'] == 'views-exposed-form-admin-views-node-system-1') {
		// Change the text on the submit button
		$vars['form']['submit']['#value'] = t('Search');
		// Rebuild the rendered version (submit button, rest remains unchanged)
		unset($vars['form']['submit']['#printed']);
		$vars['button'] = drupal_render($vars['form']['submit']);
	}
}

/**
 * preselect the  && custom redirect after node delete
 */
function drupal_projects_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'drupal_projects_page_node_form') {
		// Subpage
		$lang = $form['language']['#value'];
		
		if (is_numeric(arg(3))) {
			// preselected project
			$selected_project_tid = arg(3);
			$form['drupal_projects_project'][$lang]['#default_value'] = $selected_project_tid;
		} else {
			$selected_project_tid = $form['drupal_projects_project'][$lang]['#default_value'][0];
		}
		
		// display only parent pages that belong to current project
		$term = taxonomy_term_load($selected_project_tid);
		$project = _term_to_project($term);
		$menu_name = _project_to_menu_name($project);
		$pattern = '^' . $menu_name;
		foreach ($form['menu']['link']['parent']['#options'] as $key => $option) {
			if (!preg_match("/$pattern/", $key)) {
				unset($form['menu']['link']['parent']['#options'][$key]);
			}
		}
		
		if (is_numeric(arg(3))) {
			// enable menu creation by default
			$form['menu']['enabled']['#default_value'] = 1;
		}
		
		// hide
		$form['drupal_projects_project'][$lang]['#disabled'] = true;
		$form['drupal_projects_project'][$lang]['#type']     = 'value';
		$form['menu']['link']['weight']['#disabled']         = true;
		$form['menu']['link']['weight']['#type']             = 'value';
		$form['menu']['link']['description']['#disabled']    = true;
		$form['menu']['link']['description']['#type']        = 'value';
	}
	if ($form_id == 'node_delete_confirm' && $form['#node']->type == 'drupal_projects') {
		$form['#submit'][] = '_custom_redirect_after_delete';
	}
	if ($form_id == 'drupal_projects_node_form' && (arg(1) == 'add' || arg(2) == 'edit')) {
		// create Drupal Project
		$form['drupal_projects_project']['#access'] = false;
	}
}
function _custom_redirect_after_delete($form, &$form_state) {
	// GET destination has precedence over $form_state['redirect']
	$_GET['destination'] = 'admin/content?type=drupal_projects';
	drupal_static_reset('drupal_get_destination');
	$form_state['redirect'] = 'admin/content';
}
/**
 * collapse the 'Bulk Operations' form
 */
function drupal_projects_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
	if ($form['#form_id'] =='views_form_admin_views_node_system_1') {
		$form['select']['#collapsed'] = TRUE;
		$form['select']['#weight'] = 100;
	}
}

/**
 * implements hook_preprocess_views_view
 * Wrap exposed filters in a fieldset. 
 */
function drupal_projects_preprocess_views_view(&$vars) {
	if ($vars['exposed']) {
		drupal_add_js('misc/form.js');
		drupal_add_js('misc/collapse.js');
		// Default collapsed
		$collapsed = TRUE;
		$class = array('collapsible', 'collapsed');
		if ((isset($_GET['tid']) && count($_GET) > 2) || ((!isset($_GET['tid']) && count($_GET) > 1))) {
			// assume other get vars are exposed filters, so expand fieldset
			// to show applied filters
			$collapsed = FALSE;
			$class = array('collapsible');
		}
		$fieldset['element'] = array(
				'#title' => t('Filter'),
				'#collapsible' => TRUE,
				'#collapsed' => $collapsed,
				'#attributes' => array('class' => $class),
				'#children' => $vars['exposed'],
		);
		$vars['exposed'] = theme('fieldset', $fieldset);
	}
}

/**
 * 
 */
function drupal_projects_menu_local_tasks_alter(&$data, $router_item, $root_path) {
	switch ($root_path){
		case 'admin/content':
			if (isset($_GET['tid'])) {
				// new link 'Add page to project'
				$item = menu_get_item('node/add/drupal-projects-page');
				$item['href'] .= '/'.$_GET['tid'];
				$item['title'] = t('Add page to project');
				
				// remove original 'add content' link
				if ($data['actions']['output'][0]['#link']['path'] == 'node/add') {
					unset($data['actions']['output'][0]);
				}
				// add if access allowed
				if ($item['access']) {
					$data['actions']['output'][] = array(
						'#theme' => 'menu_local_action',
						'#link' => $item,
					);
				}
			}
			
			break;
	}
}
/**
 * Adding '+ New project' link into shortcut menu
 */
function drupal_projects_page_alter(&$page) {
  if (isset($page['page_top']['toolbar'])) {
    // If the toolbar is available, add a pre-render function to modify the
    // current shortcuts in the toolbar drawer.
    $page['page_top']['toolbar']['#pre_render'][] = 'drupal_projects_toolbar_pre_render';
  }
}
function drupal_projects_toolbar_pre_render($toolbar) {
	// turn the configure link into 'new project link'
	$toolbar['toolbar_drawer'][0]['configure']['#title'] = t('+ New project');
	$toolbar['toolbar_drawer'][0]['configure']['#href']  = 'node/add/drupal-projects';
	return $toolbar;
}
/**
 * Tie into workbench access
 */
function _workbench_access_allow_user_access_to_project($tid) {
	$account = $GLOBALS['user'];
	// Now check the user account.
	if (!isset($account->workbench_access)) {
		$account = user_load($account->uid);
	}
	$sections = @$account->workbench_access;
	if (!empty($account->workbench_access_by_role)) {
		foreach ($account->workbench_access_by_role as $key) {
			unset($sections[$key]);
		}
	}
	if (!empty($account->status) && !in_array($tid, array_keys((array)$sections))) {
		workbench_access_user_section_save($account->uid, $tid, variable_get('workbench_access'));
	}
}
/**
 * Hiding project links I have no access to
 */
function drupal_projects_menu_link_alter(&$link) {
	// please call hook_translated_menu_link_alter on my links
	if ($link['link_path'] == 'admin/content' && $link['module'] == 'drupal_projects' && $link['menu_name'] == variable_get('drupal_projects_shortcut_set_name')) {
		$link['options']['alter'] = TRUE;
	}
}

function drupal_projects_translated_menu_link_alter(&$link) {
	if ($link['link_path'] == 'admin/content' && $link['module'] == 'drupal_projects' && $link['menu_name'] == variable_get('drupal_projects_shortcut_set_name')) {
		$project_tid  = @$link['options']['query']['tid'];
		$account = $GLOBALS['user'];
		$term    = taxonomy_term_load($project_tid);
		$project = _term_to_project($term);
		// TODO duplicating workbench access call, better find to call something more high level
		// Now check the user account.
		if (!node_access('update', $project, $account)) {
			$link['hidden'] = 1;
		}
	}
}
/**
 * Utility functions
 * TODO namespace them? move to separate file?
 */

function _node_to_project($node) {
	$term    = _project_to_term($node);
	$project = _term_to_project($term);
	return $project; 
}
function _project_slug($title) {
	$t = get_t();
	module_load_include('inc', 'pathauto', 'pathauto');
	$slug = pathauto_cleanstring($t($title));
	if (strlen($slug) > 32) // 
		$slug = substr($slug, 0, 31);
	return $slug;
}
function _term_slug($title) {
	$t = get_t();
	module_load_include('inc', 'pathauto', 'pathauto');
	$slug = pathauto_cleanstring($t($title));
	if (strlen($slug) > 32) //
		$slug = substr($slug, 0, 31);
	return $slug;
}

function _project_to_term_tid($node) {
	if (!empty($node)) {
		//$tid  = @$node->drupal_projects_project[$node->language][0]['tid'];
		//return $tid;
		if ($project_ref  = $node->drupal_projects_project) {
			$project_term = array_shift($project_ref[$node->language]);
			return $project_term['tid'];
		}
	}
	return false;
}
function _project_to_term($node) {
	$tid  = _project_to_term_tid($node);
	$term = taxonomy_term_load($tid);
	return $term;
}
function _term_to_project($term) {
	// get all projects filled under this term
	$nodes = node_load_multiple(taxonomy_select_nodes($term->tid));
	// TODO BEWARE do not load all of them, filter them somehow!
	foreach ($nodes as $project) {
		if ($project->type == 'drupal_projects_project') {
			break;
		}
	}
	return $project;
	//$nodes = taxonomy_select_nodes($term->tid);
	//$node = node_load($nodes[0]);
	//$term_url = drupal_lookup_path('alias', 'node/'.$node->nid);
	
	
	// override the destination url
	// to the project home page!
	//$term_url = '';
	
}
function _project_to_menu($node) {
	$menu = _project_to_menu_array($node);
	if (menu_load($menu['menu_name'])) {
		return $menu;
	} else {
		return false;
	}
}
function _project_to_menu_array($project) {
	$t = get_t();
	$menu_array = array(
		'menu_name'   => _project_to_menu_name($project),
		'title'       =>  $t($project->title),
		'description' => 'This menu defines the core structure for the subsite '.$project->title.'. This is deleted along with any associated menu items when the subsite is deleted.',
		'module'      => 'drupal_projects',
	);
	return $menu_array;
}
function _project_to_menu_name($project) {
	return 'project-' . $project->nid . '-menu';
}
function _project_get_project_logo_uri($project) {
	if (!isset($project->drupal_projects_image[$project->language][0]['uri'])) {
		// default logo images are not populated for just referenced nodes (ie. not for main content)
		node_build_content($project);
	}
	return $project->drupal_projects_image[$project->language][0]['uri'];
}
function _project_to_acronym($project) {
	if (isset($project->field_acronym[$project->language][0]['value'])) {
		return $project->field_acronym[$project->language][0]['value'];
	}
	return $project->title;
}
function _project_get_shortcut_links() {
	$result = db_query("SELECT * FROM {menu_links} WHERE link_path = :path AND module = 'drupal_projects'", array(':path' => 'admin/content'), array('fetch' => PDO::FETCH_ASSOC));
	return $result;
}

